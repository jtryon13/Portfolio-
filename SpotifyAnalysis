# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#I took a closer look at the data using the following SQL. 

#First I determined the avg popularity, danceability, and energy by artist and track. 
SELECT artist_name ,track_name
,avg(popularity) ,avg(danceability)
,avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name

#Then I determined who the Top 10 artists are by popularity
SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10

# I also determined what the most popular song/artist was overall
Select Track_name, artist_name, popularity
From Bit_DB.spotifydata
Order by Popularity Desc
Limit 1

# I discovered which songs had a popularity score of at least 85% or above 
#Percantage can easily be subbed for >=90 or <=70 with lowest score being 69
Select Track_name, artist_name, popularity
From Bit_DB.spotifydata
Where Popularity >= 85
Order by Popularity Desc

#I compared the popularity, loudness, speechiness, energy and danceability for the top 3 songs
Select Track_name, artist_name, popularity,
loudness, speechiness, energy, danceability
From Bit_DB.spotifydata
Where popularity >=95
Order by Popularity Desc

# Lastly I used CTE to discover the stars who scored >=90 and added the tag "Top Star" for future reference.
#Prefer CTE for multiple aggregations, readability, and referencing results numerous times.
WITH popularity_average_CTE AS (
SELECT s.artist_name,
AVG(s.popularity) AS average_popularity
FROM SpotifyData s 
GROUP BY s.artist_name)
 
SELECT  artist_name, average_popularity,
'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90;
